# -*- coding: utf-8 -*-
"""Untitled27.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rATlJhT21ptJWwYdwRxPrclPQxOBIocG
"""

## üìå C√≥digo comentado
```python
# Implementa√ß√£o do algoritmo Merge Sort em Python

# Fun√ß√£o principal do Merge Sort
def merge_sort(lista):
    n = len(lista)

    # Caso base: listas de tamanho 0 ou 1 j√° est√£o ordenadas
    if n <= 1:
        return lista

    # Encontrar o √≠ndice do meio
    meio = n // 2

    # Dividir a lista em duas partes
    l1 = lista[0:meio]   # do in√≠cio at√© o meio
    l2 = lista[meio:n]   # do meio at√© o final

    # Chamar recursivamente para ordenar as duas metades
    l1 = merge_sort(l1)
    l2 = merge_sort(l2)

    # Mesclar as duas metades ordenadas
    return mesclar(l1, l2)


# Fun√ß√£o para mesclar duas listas ordenadas em uma √∫nica lista ordenada
def mesclar(a, b):
    c = []

    # Enquanto as duas listas tiverem elementos, compara e pega o menor
    while len(a) > 0 and len(b) > 0:
        if a[0] > b[0]:
            c.append(b.pop(0))  # remove e adiciona o menor de b
        else:
            c.append(a.pop(0))  # remove e adiciona o menor de a

    # Se sobrarem elementos em a, adiciona todos em c
    while len(a) > 0:
        c.append(a.pop(0))

    # Se sobrarem elementos em b, adiciona todos em c
    while len(b) > 0:
        c.append(b.pop(0))

    return c


# Exemplo de lista desordenada
lista_para_ordenar = [37, 5, 92, 18, 63, 74, 29, 8, 41, 56]

# Chamada do algoritmo
print(merge_sort(lista_para_ordenar))